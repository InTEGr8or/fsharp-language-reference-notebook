#!markdown

# Basic types

This topic lists the basic types that are defined in the F# language. These types are the most fundamental in F#, forming the basis of nearly every F# program. They are a superset of .NET primitive types.

<table class="table"><caption class="visually-hidden">Basic types</caption>
<thead>
<tr>
<th>Type</th>
<th>.NET type</th>
<th>Description</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr>
<td>`bool`</td>
<td><a href="/en-us/dotnet/api/system.boolean" data-linktype="absolute-path">Boolean</a></td>
<td>Possible values are `true` and `false`.</td>
<td>`true`/`false`</td>
</tr>
<tr>
<td>`byte`</td>
<td><a href="/en-us/dotnet/api/system.byte" data-linktype="absolute-path">Byte</a></td>
<td>Values from 0 to 255.</td>
<td>`1uy`</td>
</tr>
<tr>
<td>`sbyte`</td>
<td><a href="/en-us/dotnet/api/system.sbyte" data-linktype="absolute-path">SByte</a></td>
<td>Values from -128 to 127.</td>
<td>`1y`</td>
</tr>
<tr>
<td>`int16`</td>
<td><a href="/en-us/dotnet/api/system.int16" data-linktype="absolute-path">Int16</a></td>
<td>Values from -32768 to 32767.</td>
<td>`1s`</td>
</tr>
<tr>
<td>`uint16`</td>
<td><a href="/en-us/dotnet/api/system.uint16" data-linktype="absolute-path">UInt16</a></td>
<td>Values from 0 to 65535.</td>
<td>`1us`</td>
</tr>
<tr>
<td>`int`</td>
<td><a href="/en-us/dotnet/api/system.int32" data-linktype="absolute-path">Int32</a></td>
<td>Values from -2,147,483,648 to 2,147,483,647.</td>
<td>`1`</td>
</tr>
<tr>
<td>`uint`</td>
<td><a href="/en-us/dotnet/api/system.uint32" data-linktype="absolute-path">UInt32</a></td>
<td>Values from 0 to 4,294,967,295.</td>
<td>`1u`</td>
</tr>
<tr>
<td>`int64`</td>
<td><a href="/en-us/dotnet/api/system.int64" data-linktype="absolute-path">Int64</a></td>
<td>Values from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807.</td>
<td>`1L`</td>
</tr>
<tr>
<td>`uint64`</td>
<td><a href="/en-us/dotnet/api/system.uint64" data-linktype="absolute-path">UInt64</a></td>
<td>Values from 0 to 18,446,744,073,709,551,615.</td>
<td>`1UL`</td>
</tr>
<tr>
<td>`nativeint`</td>
<td><a href="/en-us/dotnet/api/system.intptr" data-linktype="absolute-path">IntPtr</a></td>
<td>A native pointer as a signed integer.</td>
<td>`nativeint 1`</td>
</tr>
<tr>
<td>`unativeint`</td>
<td><a href="/en-us/dotnet/api/system.uintptr" data-linktype="absolute-path">UIntPtr</a></td>
<td>A native pointer as an unsigned integer.</td>
<td>`unativeint 1`</td>
</tr>
<tr>
<td>`decimal`</td>
<td><a href="/en-us/dotnet/api/system.decimal" data-linktype="absolute-path">Decimal</a></td>
<td>A floating point data type that has at least 28 significant digits.</td>
<td>`1.0`</td>
</tr>
<tr>
<td>`float`, `double`</td>
<td><a href="/en-us/dotnet/api/system.double" data-linktype="absolute-path">Double</a></td>
<td>A 64-bit floating point type.</td>
<td>`1.0`</td>
</tr>
<tr>
<td>`float32`, `single`</td>
<td><a href="/en-us/dotnet/api/system.single" data-linktype="absolute-path">Single</a></td>
<td>A 32-bit floating point type.</td>
<td>`1.0f`</td>
</tr>
<tr>
<td>`char`</td>
<td><a href="/en-us/dotnet/api/system.char" data-linktype="absolute-path">Char</a></td>
<td>Unicode character values.</td>
<td>`'c'`</td>
</tr>
<tr>
<td>`string`</td>
<td><a href="/en-us/dotnet/api/system.string" data-linktype="absolute-path">String</a></td>
<td>Unicode text.</td>
<td>`"str"`</td>
</tr>
<tr>
<td>`unit`</td>
<td>not applicable</td>
<td>Indicates the absence of an actual value. The type has only one formal value, which is denoted `()`. The unit value, `()`, is often used as a placeholder where a value is needed but no real value is available or makes sense.</td>
<td>`()`</td>
</tr>
</tbody>
</table>

> <span class="docon docon-status-error-outline" aria-hidden="true"></span> Note
You can perform computations with integers too big for the 64-bit integer type by using the `bigint` type. `bigint` is not considered a basic type; it is an abbreviation for `System.Numerics.BigInteger`.


## See also

