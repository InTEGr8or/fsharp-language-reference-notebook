#!markdown

[SOURCE: Language_Reference_F#](https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/keyword-reference)

# Keyword Reference

 +7 

This topic contains links to information about all F# language keywords.

## F# Keyword Table

The following table shows all F# keywords in alphabetical order, together with brief descriptions and links to relevant topics that contain more information.

<caption class="visually-hidden">F# Keyword Table</caption>

| Keyword | Link | Description |
| --- | --- | --- |
| `abstract` | [Members](members/)  <br>  <br>[Abstract Classes](abstract-classes) | Indicates a method that either has no implementation in the type in which it is declared or that is virtual and has a default implementation. |
| `and` | [`let` Bindings](functions/let-bindings)  <br>  <br>[Records](records)  <br>  <br>[Members](members/)  <br>  <br>[Constraints](generics/constraints) | Used in mutually recursive bindings and records, in property declarations, and with multiple constraints on generic parameters. |
| `as` | [Classes](classes)  <br>  <br>[Pattern Matching](pattern-matching) | Used to give the current class object an object name. Also used to give a name to a whole pattern within a pattern match. |
| `assert` | [Assertions](assertions) | Used to verify code during debugging. |
| `base` | [Classes](classes)  <br>  <br>[Inheritance](inheritance) | Used as the name of the base class object. |
| `begin` | [Verbose Syntax](verbose-syntax) | In verbose syntax, indicates the start of a code block. |
| `class` | [Classes](classes) | In verbose syntax, indicates the start of a class definition. |
| `default` | [Members](members/) | Indicates an implementation of an abstract method; used together with an abstract method declaration to create a virtual method. |
| `delegate` | [Delegates](delegates) | Used to declare a delegate. |
| `do` | [do Bindings](functions/do-bindings)  <br>  <br>[Loops: `for...to` Expression](loops-for-to-expression)  <br>  <br>[Loops: `for...in` Expression](loops-for-in-expression)  <br>  <br>[Loops: `while...do` Expression](loops-while-do-expression) | Used in looping constructs or to execute imperative code. |
| `done` | [Verbose Syntax](verbose-syntax) | In verbose syntax, indicates the end of a block of code in a looping expression. |
| `downcast` | [Casting and Conversions](casting-and-conversions) | Used to convert to a type that is lower in the inheritance chain. |
| `downto` | [Loops: `for...to` Expression](loops-for-to-expression) | In a `for` expression, used when counting in reverse. |
| `elif` | [Conditional Expressions: `if...then...else`](conditional-expressions-if-then-else) | Used in conditional branching. A short form of `else if`. |
| `else` | [Conditional Expressions: `if...then...else`](conditional-expressions-if-then-else) | Used in conditional branching. |
| `end` | [Structures](structures)  <br>  <br>[Discriminated Unions](discriminated-unions)  <br>  <br>[Records](records)  <br>  <br>[Type Extensions](type-extensions)  <br>  <br>[Verbose Syntax](verbose-syntax) | In type definitions and type extensions, indicates the end of a section of member definitions.  <br>  <br>In verbose syntax, used to specify the end of a code block that starts with the `begin` keyword. |
| `exception` | [Exception Handling](exception-handling/)  <br>  <br>[Exception Types](exception-handling/exception-types) | Used to declare an exception type. |
| `extern` | [External Functions](functions/external-functions) | Indicates that a declared program element is defined in another binary or assembly. |
| `false` | [Primitive Types](basic-types) | Used as a Boolean literal. |
| `finally` | [Exceptions: The `try...finally` Expression](exception-handling/the-try-finally-expression) | Used together with `try` to introduce a block of code that executes regardless of whether an exception occurs. |
| `fixed` | [Fixed](fixed) | Used to "pin" a pointer on the stack to prevent it from being garbage collected. |
| `for` | [Loops: `for...to` Expression](loops-for-to-expression)  <br>  <br>[Loops: for...in Expression](loops-for-in-expression) | Used in looping constructs. |
| `fun` | [Lambda Expressions: The `fun` Keyword](functions/lambda-expressions-the-fun-keyword) | Used in lambda expressions, also known as anonymous functions. |
| `function` | [Match Expressions](match-expressions)  <br>  <br>[Lambda Expressions: The fun Keyword](functions/lambda-expressions-the-fun-keyword) | Used as a shorter alternative to the `fun` keyword and a `match` expression in a lambda expression that has pattern matching on a single argument. |
| `global` | [Namespaces](namespaces) | Used to reference the top-level .NET namespace. |
| `if` | [Conditional Expressions: `if...then...else`](conditional-expressions-if-then-else) | Used in conditional branching constructs. |
| `in` | [Loops: for...in Expression](loops-for-in-expression)  <br>  <br>[Verbose Syntax](verbose-syntax) | Used for sequence expressions and, in verbose syntax, to separate expressions from bindings. |
| `inherit` | [Inheritance](inheritance) | Used to specify a base class or base interface. |
| `inline` | [Functions](functions/)  <br>  <br>[Inline Functions](functions/inline-functions) | Used to indicate a function that should be integrated directly into the caller's code. |
| `interface` | [Interfaces](interfaces) | Used to declare and implement interfaces. |
| `internal` | [Access Control](access-control) | Used to specify that a member is visible inside an assembly but not outside it. |
| `lazy` | [Lazy Expressions](lazy-expressions) | Used to specify an expression that is to be performed only when a result is needed. |
| `let` | [`let` Bindings](functions/let-bindings) | Used to associate, or bind, a name to a value or function. |
| `let!` | [Asynchronous Workflows](asynchronous-workflows)  <br>  <br>[Computation Expressions](computation-expressions) | Used in asynchronous workflows to bind a name to the result of an asynchronous computation, or, in other computation expressions, used to bind a name to a result, which is of the computation type. |
| `match` | [Match Expressions](match-expressions) | Used to branch by comparing a value to a pattern. |
| `match!` | [Computation Expressions](computation-expressions#match) | Used to inline a call to a computation expression and pattern match on its result. |
| `member` | [Members](members/) | Used to declare a property or method in an object type. |
| `module` | [Modules](modules) | Used to associate a name with a group of related types, values, and functions, to logically separate it from other code. |
| `mutable` | [let Bindings](functions/let-bindings) | Used to declare a variable, that is, a value that can be changed. |
| `namespace` | [Namespaces](namespaces) | Used to associate a name with a group of related types and modules, to logically separate it from other code. |
| `new` | [Constructors](members/constructors)  <br>  <br>[Constraints](generics/constraints) | Used to declare, define, or invoke a constructor that creates or that can create an object.  <br>  <br>Also used in generic parameter constraints to indicate that a type must have a certain constructor. |
| `not` | [Symbol and Operator Reference](symbol-and-operator-reference/)  <br>  <br>[Constraints](generics/constraints) | Not actually a keyword. However, `not struct` in combination is used as a generic parameter constraint. |
| `null` | [Null Values](values/null-values)  <br>  <br>[Constraints](generics/constraints) | Indicates the absence of an object.  <br>  <br>Also used in generic parameter constraints. |
| `of` | [Discriminated Unions](discriminated-unions)  <br>  <br>[Delegates](delegates)  <br>  <br>[Exception Types](exception-handling/exception-types) | Used in discriminated unions to indicate the type of categories of values, and in delegate and exception declarations. |
| `open` | [Import Declarations: The `open` Keyword](import-declarations-the-open-keyword) | Used to make the contents of a namespace or module available without qualification. |
| `or` | [Symbol and Operator Reference](symbol-and-operator-reference/)  <br>  <br>[Constraints](generics/constraints) | Used with Boolean conditions as a Boolean `or` operator. Equivalent to `||`.  <br>  <br>Also used in member constraints. |
| `override` | [Members](members/) | Used to implement a version of an abstract or virtual method that differs from the base version. |
| `private` | [Access Control](access-control) | Restricts access to a member to code in the same type or module. |
| `public` | [Access Control](access-control) | Allows access to a member from outside the type. |
| `rec` | [Functions](functions/) | Used to indicate that a function is recursive. |
| `return` | [Asynchronous Workflows](asynchronous-workflows)  <br>  <br>[Computation Expressions](computation-expressions) | Used to indicate a value to provide as the result of a computation expression. |
| `return!` | [Computation Expressions](computation-expressions)  <br>  <br>[Asynchronous Workflows](asynchronous-workflows) | Used to indicate a computation expression that, when evaluated, provides the result of the containing computation expression. |
| `select` | [Query Expressions](query-expressions) | Used in query expressions to specify what fields or columns to extract. Note that this is a contextual keyword, which means that it is not actually a reserved word and it only acts like a keyword in appropriate context. |
| `static` | [Members](members/) | Used to indicate a method or property that can be called without an instance of a type, or a value member that is shared among all instances of a type. |
| `struct` | [Structures](structures)  <br>  <br> [Tuples](tuples)  <br>  <br>[Constraints](generics/constraints) | Used to declare a structure type.  <br>  <br>Used to specify a struct tuple.  <br>  <br>Also used in generic parameter constraints.  <br>  <br>Used for OCaml compatibility in module definitions. |
| `then` | [Conditional Expressions: `if...then...else`](conditional-expressions-if-then-else)  <br>  <br>[Constructors](members/constructors) | Used in conditional expressions.  <br>  <br>Also used to perform side effects after object construction. |
| `to` | [Loops: `for...to` Expression](loops-for-to-expression) | Used in `for` loops to indicate a range. |
| `true` | [Primitive Types](basic-types) | Used as a Boolean literal. |
| `try` | [Exceptions: The try...with Expression](exception-handling/the-try-with-expression)  <br>  <br>[Exceptions: The try...finally Expression](exception-handling/the-try-finally-expression) | Used to introduce a block of code that might generate an exception. Used together with `with` or `finally`. |
| `type` | [F# Types](fsharp-types)  <br>  <br>[Classes](classes)  <br>  <br>[Records](records)  <br>  <br>[Structures](structures)  <br>  <br>[Enumerations](enumerations)  <br>  <br>[Discriminated Unions](discriminated-unions)  <br>  <br>[Type Abbreviations](type-abbreviations)  <br>  <br>[Units of Measure](units-of-measure) | Used to declare a class, record, structure, discriminated union, enumeration type, unit of measure, or type abbreviation. |
| `upcast` | [Casting and Conversions](casting-and-conversions) | Used to convert to a type that is higher in the inheritance chain. |
| `use` | [Resource Management: The `use` Keyword](resource-management-the-use-keyword) | Used instead of `let` for values that require `Dispose` to be called to free resources. |
| `use!` | [Computation Expressions](computation-expressions)  <br>  <br>[Asynchronous Workflows](asynchronous-workflows) | Used instead of `let!` in asynchronous workflows and other computation expressions for values that require `Dispose` to be called to free resources. |
| `val` | [Explicit Fields: The `val` Keyword](members/explicit-fields-the-val-keyword)  <br>  <br>[Signatures](signature-files)  <br>  <br>[Members](members/) | Used in a signature to indicate a value, or in a type to declare a member, in limited situations. |
| `void` | [Primitive Types](basic-types) | Indicates the .NET `void` type. Used when interoperating with other .NET languages. |
| `when` | [Constraints](generics/constraints) | Used for Boolean conditions (*when guards*) on pattern matches and to introduce a constraint clause for a generic type parameter. |
| `while` | [Loops: `while...do` Expression](loops-while-do-expression) | Introduces a looping construct. |
| `with` | [Match Expressions](match-expressions)  <br>  <br>[Object Expressions](object-expressions)  <br>  <br>[Copy and Update Record Expressions](copy-and-update-record-expressions)  <br>  <br>[Type Extensions](type-extensions)  <br>  <br>[Exceptions: The `try...with` Expression](exception-handling/the-try-with-expression) | Used together with the `match` keyword in pattern matching expressions. Also used in object expressions, record copying expressions, and type extensions to introduce member definitions, and to introduce exception handlers. |
| `yield` | [Lists](lists), [Arrays](arrays), [Sequences](sequences) | Used in a list, array, or sequence expression to produce a value for a sequence. Typically can be omitted, as it is implicit in most situations. |
| `yield!` | [Computation Expressions](computation-expressions)  <br>  <br>[Asynchronous Workflows](asynchronous-workflows) | Used in a computation expression to append the result of a given computation expression to a collection of results for the containing computation expression. |
| `const` | [Type Providers](../tutorials/type-providers/) | Type Providers allow the use of `const` as a keyword to specify a constant literal as a type parameter argument. |

The following tokens are reserved in F# because they are keywords in the OCaml language:

If you use the `--mlcompatibility` compiler option, the above keywords are available for use as identifiers.

The following tokens are reserved as keywords for future expansion of the F# language:

## See also

